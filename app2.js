// Esperamos a que el DOM est√© completamente cargado antes de ejecutar el c√≥digo
document.addEventListener('DOMContentLoaded', () => {
  // üé∂ Referencias a los elementos del DOM
  const audio = document.getElementById('audio'); // Elemento <audio>
  const playPauseBtn = document.getElementById('play-pause'); // Bot√≥n play/pause
  const prevBtn = document.getElementById('prev'); // Bot√≥n anterior
  const nextBtn = document.getElementById('next'); // Bot√≥n siguiente
  const repeatBtn = document.getElementById('repeat'); // Bot√≥n de repetir
  const progress = document.getElementById('progress'); // Barra de progreso
  const currentTimeEl = document.getElementById('current-time'); // Tiempo actual
  const totalTimeEl = document.getElementById('total-time'); // Tiempo total
  const coverImg = document.getElementById('cover'); // Imagen del √°lbum
  const titleEl = document.getElementById('title'); // T√≠tulo de la canci√≥n
  const artistEl = document.getElementById('artist'); // Artista

  let songs = []; // Arreglo donde guardaremos las canciones del JSON
  let currentSongIndex = 0; // √çndice de la canci√≥n actual
  let isRepeating = false; // Controla si la canci√≥n se repite

  // üì¶ Cargar las canciones desde songs.json
  fetch('songs.json')
    .then(response => response.json())
    .then(data => {
      songs = data;
      loadSong(songs[currentSongIndex]); // Cargar la primera canci√≥n al inicio
    })
    .catch(error => console.error('Error al cargar las canciones:', error));

  // üéß Funci√≥n que carga una canci√≥n en el reproductor
  function loadSong(song) {
    titleEl.textContent = song.title; // Muestra el t√≠tulo
    artistEl.textContent = song.artist; // Muestra el artista
    coverImg.src = song.cover; // Cambia la portada
    audio.src = song.src; // Asigna el archivo de audio
  }

  // ‚ñ∂Ô∏è Funci√≥n para reproducir la canci√≥n
  function playSong() {
    audio.play();
    playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>'; // Cambia icono a pausa
  }

  // ‚è∏Ô∏è Funci√≥n para pausar la canci√≥n
  function pauseSong() {
    audio.pause();
    playPauseBtn.innerHTML = '<i class="fas fa-play"></i>'; // Cambia icono a play
  }

  // üîÅ Alternar entre reproducir/pausar
  playPauseBtn.addEventListener('click', () => {
    if (audio.paused) {
      playSong();
    } else {
      pauseSong();
    }
  });

  // ‚è≠Ô∏è Pasar a la siguiente canci√≥n
  nextBtn.addEventListener('click', () => {
    currentSongIndex = (currentSongIndex + 1) % songs.length;
    loadSong(songs[currentSongIndex]);
    playSong();
  });

  // ‚èÆÔ∏è Regresar a la canci√≥n anterior
  prevBtn.addEventListener('click', () => {
    currentSongIndex = (currentSongIndex - 1 + songs.length) % songs.length;
    loadSong(songs[currentSongIndex]);
    playSong();
  });

  // üîÅ Activar/desactivar modo repetir
  repeatBtn.addEventListener('click', () => {
    isRepeating = !isRepeating;
    repeatBtn.classList.toggle('active', isRepeating); // A√±ade clase visual
  });

  // üé∂ Si termina una canci√≥n
  audio.addEventListener('ended', () => {
    if (isRepeating) {
      playSong(); // Repetir la misma canci√≥n
    } else {
      currentSongIndex = (currentSongIndex + 1) % songs.length;
      loadSong(songs[currentSongIndex]);
      playSong();
    }
  });

  // üìä Actualizar la barra de progreso y el tiempo
  audio.addEventListener('timeupdate', () => {
    const progressPercent = (audio.currentTime / audio.duration) * 100;
    progress.value = progressPercent || 0; // Controla el llenado del input range
    updateTimes();
  });

  // ‚è© Permite cambiar el progreso al arrastrar la barra
  progress.addEventListener('input', () => {
    audio.currentTime = (progress.value / 100) * audio.duration;
  });

  // ‚è±Ô∏è Mostrar el tiempo actual y total del audio
  function updateTimes() {
    const currentMinutes = Math.floor(audio.currentTime / 60) || 0;
    const currentSeconds = Math.floor(audio.currentTime % 60) || 0;
    const durationMinutes = Math.floor(audio.duration / 60) || 0;
    const durationSeconds = Math.floor(audio.duration % 60) || 0;

    currentTimeEl.textContent = `${currentMinutes}:${currentSeconds
      .toString()
      .padStart(2, '0')}`;
    totalTimeEl.textContent = `${durationMinutes}:${durationSeconds
      .toString()
      .padStart(2, '0')}`;
  }
});
